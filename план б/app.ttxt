from flask import Flask, render_template, request, redirect, url_for, session
import pyodbc
import bcrypt
import json
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'your-secret-key'

# Подключение к БД
def get_db_connection():
    return pyodbc.connect(
        r'DRIVER={ODBC Driver 17 for SQL Server};'
        r'SERVER=localhost\SQLEXPRESS;'
        r'DATABASE=warehouse;'
        r'UID=flask_user;'
        r'PWD=elich3258;'
    )

@app.route('/', methods=['GET', 'POST'])
@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None  # Для передачи ошибки в шаблон (если нужно)

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, password, role FROM Users WHERE username = ?", (username,))
        user = cursor.fetchone()
        conn.close()

        if user and bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            session['user_id'] = user.user_id
            session['username'] = username
            session['role'] = user.role

            if user.role == 'admin':
                return redirect('/admin')
            elif user.role == 'staff':
                return redirect('/staff')
            elif user.role == 'supplier':
                return redirect('/supplier')
            else:
                return "Неизвестная роль пользователя"
        else:
            return render_template('login.html')

    return render_template('login.html')

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return redirect(url_for('login'))

# Страница регистрации (только для админа)
@app.route('/register', methods=['GET', 'POST'])
def register():
    if 'role' not in session or session['role'] != 'admin':
        return "Доступ запрещён", 403

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']

        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Users (username, password, role) VALUES (?, ?, ?)",
                       (username, hashed_password, role))
        conn.commit()
        conn.close()

        return redirect('/login')

    return render_template('register.html')

@app.route('/admin')
def admin_panel():
    if 'user_id' not in session or session.get('role') != 'admin':
        return redirect('/login')
    
    # Получаем статистику для дашборда
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Количество поставок
    cursor.execute("SELECT COUNT(*) FROM Deliveries")
    total_deliveries = cursor.fetchone()[0]
    
    # Количество активных пользователей
    cursor.execute("SELECT COUNT(*) FROM Users")
    active_users = cursor.fetchone()[0]
    
    conn.close()
    
    return render_template(
        'admin_panel.html',
        username=session['username'],
        total_deliveries=total_deliveries,
        active_users=active_users
    )

@app.route('/admin/deliveries')
def admin_deliveries():
    if 'user_id' not in session or session.get('role') != 'admin':
        return redirect('/login')

    status_filter = request.args.get('status_filter', 'all')
    conn = get_db_connection()
    cursor = conn.cursor()

    query = """
        SELECT D.delivery_id, D.delivery_date, D.status, 
               S.supplier_name, U.username as created_by
        FROM Deliveries D
        JOIN Suppliers S ON D.supplier_id = S.supplier_id
        JOIN Users U ON D.created_by = U.user_id
    """
    params = []

    if status_filter != 'all':
        query += " WHERE D.status = ?"
        params.append(status_filter)

    query += " ORDER BY D.delivery_date DESC"
    cursor.execute(query, params)
    deliveries = cursor.fetchall()
    conn.close()

    return render_template('admin_deliveries.html', deliveries=deliveries)

@app.route('/admin/approve_delivery/<int:delivery_id>', methods=['POST'])
def approve_delivery(delivery_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE Deliveries 
        SET status = 'received' 
        WHERE delivery_id = ? AND status = 'pending'
    """, (delivery_id,))
    conn.commit()
    conn.close()

    return redirect(url_for('admin_deliveries', operation_status=f'approved_{delivery_id}'))

@app.route('/admin/cancel_delivery/<int:delivery_id>', methods=['POST'])
def admin_cancel_delivery(delivery_id):
    if 'user_id' not in session or session.get('role') != 'admin':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE Deliveries 
        SET status = 'cancelled' 
        WHERE delivery_id = ? AND status = 'pending'
    """, (delivery_id,))
    conn.commit()
    conn.close()

    return redirect(url_for('admin_deliveries', operation_status=f'cancelled_{delivery_id}'))

@app.route('/staff')
def staff_panel():
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    # Получаем список принятых товаров
    cursor.execute("""
        SELECT I.item_id, I.item_name, I.article_code, I.status, I.price, I.weight, 
               I.size, I.item_type, L.location_name
        FROM Items I
        LEFT JOIN Item_Locations IL ON I.item_id = IL.item_id
        LEFT JOIN Locations L ON IL.location_id = L.location_id
        ORDER BY I.item_id DESC
    """)
    items = []
    columns = [column[0] for column in cursor.description]
    for row in cursor.fetchall():
        items.append(dict(zip(columns, row)))

    # Получаем ожидающие поставки
    cursor.execute("""
        SELECT D.delivery_id, S.supplier_name, 
               FORMAT(D.delivery_date, 'dd.MM.yyyy') as delivery_date, 
               D.status, D.item_list as delivery_items
        FROM Deliveries D
        JOIN Suppliers S ON D.supplier_id = S.supplier_id
        WHERE D.status = 'pending'
        ORDER BY D.delivery_date DESC
    """)
    deliveries = []
    columns = [column[0] for column in cursor.description]
    for row in cursor.fetchall():
        delivery_data = dict(zip(columns, row))
        try:
            # Переименовываем поле, чтобы избежать конфликта с методом items()
            delivery_data['delivery_items'] = json.loads(delivery_data['delivery_items'])
            deliveries.append(delivery_data)
        except json.JSONDecodeError as e:
            print(f"Ошибка декодирования JSON: {e}")
            continue

    conn.close()

    return redirect(url_for('staff_dashboard'), items=items, deliveries=deliveries)

@app.route('/receive_delivery/<int:delivery_id>', methods=['POST'])
def receive_delivery(delivery_id):
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # 1. Получаем информацию о поставке
        cursor.execute("""
            SELECT item_list, supplier_id FROM Deliveries 
            WHERE delivery_id = ? AND status = 'pending'
        """, (delivery_id,))
        row = cursor.fetchone()
        if not row:
            conn.close()
            return "Поставка не найдена или уже обработана", 404

        items = json.loads(row.item_list)
        supplier_id = row.supplier_id

        # 2. Получаем свободные ячейки, сгруппированные по типам
        cursor.execute("""
            SELECT location_id, location_type 
            FROM Locations
            WHERE location_id NOT IN (SELECT location_id FROM Item_Locations)
            ORDER BY 
                CASE WHEN location_type = 'обычный' THEN 1 ELSE 0 END,
                location_type
        """)
        
        # Создаем словарь {тип_ячейки: [список_доступных_ячеек]}
        free_locations = {}
        for loc in cursor.fetchall():
            if loc.location_type not in free_locations:
                free_locations[loc.location_type] = []
            free_locations[loc.location_type].append(loc.location_id)

        # 3. Обрабатываем каждый товар из поставки
        for item in items:
            item_type = item['type']
            location_id = None
            
            # Сначала ищем специализированную ячейку
            if item_type in free_locations and free_locations[item_type]:
                location_id = free_locations[item_type].pop()
            # Затем ищем обычную ячейку
            elif 'обычный' in free_locations and free_locations['обычный']:
                location_id = free_locations['обычный'].pop()
            
            if not location_id:
                conn.rollback()
                return f"Недостаточно ячеек для товара типа {item_type}", 400

            # 4. Проверяем совместимость вручную
            cursor.execute("""
                SELECT location_type FROM Locations WHERE location_id = ?
            """, (location_id,))
            loc_type = cursor.fetchone().location_type
            
            if loc_type != 'обычный' and loc_type != item_type:
                conn.rollback()
                return f"Несовместимость: товар типа {item_type} нельзя разместить в ячейке типа {loc_type}", 400

            # 5. Добавляем товар в таблицу Items
            cursor.execute("""
                INSERT INTO Items (item_name, article_code, price, weight, size, 
                                 item_type, status, created_by, supplier_id)
                VALUES (?, ?, ?, ?, ?, ?, 'accepted', ?, ?)
            """, (
                item['item_name'], 
                item['article_code'], 
                item['price'],
                item['weight'], 
                item['size'], 
                item_type, 
                session['user_id'],
                supplier_id
            ))
            
            # Получаем ID нового товара
            new_item_id = cursor.execute("SELECT SCOPE_IDENTITY()").fetchone()[0]
            
            # 6. Размещаем товар в ячейку
            cursor.execute("""
                INSERT INTO Item_Locations (item_id, location_id, placed_by)
                VALUES (?, ?, ?)
            """, (new_item_id, location_id, session['user_id']))
            
            # 7. Логируем операцию
            cursor.execute("""
                INSERT INTO Inventory_Transactions 
                (user_id, item_id, location_id, transaction_type)
                VALUES (?, ?, ?, 'receive_delivery')
            """, (session['user_id'], new_item_id, location_id))

        # 8. Обновляем статус поставки
        cursor.execute("""
            UPDATE Deliveries 
            SET status = 'received' 
            WHERE delivery_id = ?
        """, (delivery_id,))
        
        conn.commit()
        
    except Exception as e:
        conn.rollback()
        return f"Ошибка при обработке поставки: {str(e)}", 500
    finally:
        conn.close()

    return redirect('/staff')


@app.route('/place_item/<int:item_id>', methods=['POST'])
def place_item(item_id):
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # Получаем тип товара
        cursor.execute("SELECT item_type FROM Items WHERE item_id = ?", (item_id,))
        item_type = cursor.fetchone().item_type

        # Находим подходящую свободную ячейку
        cursor.execute("""
            SELECT TOP 1 location_id 
            FROM Locations 
            WHERE location_id NOT IN (SELECT location_id FROM Item_Locations)
            AND (location_type = ? OR location_type = 'обычный')
            ORDER BY 
                CASE WHEN location_type = ? THEN 0 ELSE 1 END  -- Приоритет для специализированных ячеек
        """, (item_type, item_type))
        
        location = cursor.fetchone()
        if not location:
            return "Нет подходящих свободных ячеек", 400

        # Размещаем товар
        cursor.execute("""
            INSERT INTO Item_Locations (item_id, location_id, placed_by)
            VALUES (?, ?, ?)
        """, (item_id, location.location_id, session['user_id']))
        
        # Логируем действие
        cursor.execute("""
            INSERT INTO Inventory_Transactions 
            (user_id, item_id, location_id, transaction_type)
            VALUES (?, ?, ?, 'place')
        """, (session['user_id'], item_id, location.location_id))
        
        conn.commit()
        
    except Exception as e:
        conn.rollback()
        return f"Ошибка при размещении товара: {str(e)}", 500
    finally:
        conn.close()

    return redirect('/staff')

@app.route('/return_item/<int:item_id>', methods=['POST'])
def return_item(item_id):
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # Получаем информацию о товаре
        cursor.execute("""
            SELECT supplier_id FROM Items WHERE item_id = ?
        """, (item_id,))
        supplier_id = cursor.fetchone().supplier_id

        # Удаляем товар (триггер автоматически освободит ячейку)
        cursor.execute("""
            DELETE FROM Items WHERE item_id = ?
        """, (item_id,))
        
        # Логируем возврат поставщику
        cursor.execute("""
            INSERT INTO Outbound_Deliveries 
            (destination_address, status, item_list, created_by)
            VALUES (?, 'returned', ?, ?)
        """, (
            f"Возврат поставщику {supplier_id}",
            json.dumps([{"item_id": item_id}]),
            session['user_id']
        ))
        
        conn.commit()
        
    except Exception as e:
        conn.rollback()
        return f"Ошибка при возврате товара: {str(e)}", 500
    finally:
        conn.close()

    return redirect('/staff')


# Добавим новые маршруты для сотрудника
@app.route('/staff/dashboard')
def staff_dashboard():
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Получаем статистику для дашборда
    cursor.execute("SELECT COUNT(*) FROM Deliveries WHERE status = 'pending'")
    pending_deliveries_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM Deliveries WHERE status = 'received'")
    received_deliveries_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM Items")
    items_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM Outbound_Deliveries")
    outbound_count = cursor.fetchone()[0]
    
    # Получаем последние действия
    cursor.execute("""
        SELECT TOP 5 transaction_date as time, 
               CASE 
                   WHEN transaction_type = 'receive_delivery' THEN 'Прием поставки'
                   WHEN transaction_type = 'place' THEN 'Размещение товара'
                   WHEN transaction_type = 'return' THEN 'Возврат товара'
                   ELSE transaction_type
               END as description
        FROM Inventory_Transactions
        ORDER BY transaction_date DESC
    """)
    recent_actions = [dict(zip([column[0] for column in cursor.description], row)) 
                     for row in cursor.fetchall()]
    
    conn.close()
    
    return render_template(
        'staff_dashboard.html',
        current_date=datetime.now().strftime('%d.%m.%Y'),
        pending_deliveries_count=pending_deliveries_count,
        received_deliveries_count=received_deliveries_count,
        items_count=items_count,
        outbound_count=outbound_count,
        recent_actions=recent_actions
    )

@app.route('/staff/deliveries')
def staff_deliveries():
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    status_filter = request.args.get('status', 'pending')
    conn = get_db_connection()
    cursor = conn.cursor()

    query = """
        SELECT D.delivery_id, S.supplier_name, 
               FORMAT(D.delivery_date, 'dd.MM.yyyy') as delivery_date, 
               D.status, D.item_list as items_json
        FROM Deliveries D
        JOIN Suppliers S ON D.supplier_id = S.supplier_id
        WHERE D.status = ?
        ORDER BY D.delivery_date DESC
    """
    cursor.execute(query, (status_filter,))
    
    deliveries = []
    for row in cursor.fetchall():
        delivery = dict(zip([column[0] for column in cursor.description], row))
        try:
            delivery['items'] = json.loads(delivery['items_json'])
            delivery['items_count'] = len(delivery['items'])
        except:
            delivery['items'] = []
            delivery['items_count'] = 0
        deliveries.append(delivery)
    
    conn.close()
    
    return render_template(
        'staff_deliveries.html',
        deliveries=deliveries,
        status_filter=status_filter
    )

@app.route('/staff/deliveries/<int:delivery_id>')
def staff_delivery_details(delivery_id):
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT D.delivery_id, S.supplier_name, 
               FORMAT(D.delivery_date, 'dd.MM.yyyy') as delivery_date, 
               D.status, D.item_list as items_json
        FROM Deliveries D
        JOIN Suppliers S ON D.supplier_id = S.supplier_id
        WHERE D.delivery_id = ?
    """, (delivery_id,))
    
    delivery = cursor.fetchone()
    if not delivery:
        conn.close()
        return "Поставка не найдена", 404
    
    delivery = dict(zip([column[0] for column in cursor.description], delivery))
    try:
        delivery['items'] = json.loads(delivery['items_json'])
    except:
        delivery['items'] = []
    
    conn.close()
    
    return render_template(
        'staff_delivery_details.html',
        delivery=delivery
    )

@app.route('/staff/outbound')
def staff_outbound():
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    status_filter = request.args.get('status', 'preparing')
    conn = get_db_connection()
    cursor = conn.cursor()

    query = """
        SELECT outbound_id, destination_address, 
               FORMAT(delivery_date, 'dd.MM.yyyy') as delivery_date, 
               status, item_list as items_json
        FROM Outbound_Deliveries
        WHERE status = ?
        ORDER BY delivery_date DESC
    """
    cursor.execute(query, (status_filter,))
    
    outbounds = []
    for row in cursor.fetchall():
        outbound = dict(zip([column[0] for column in cursor.description], row))
        try:
            outbound['items'] = json.loads(outbound['items_json'])
            outbound['items_count'] = len(outbound['items'])
        except:
            outbound['items'] = []
            outbound['items_count'] = 0
        outbounds.append(outbound)
    
    conn.close()
    
    return render_template(
        'staff_outbound.html',
        outbounds=outbounds,
        status_filter=status_filter
    )

@app.route('/staff/inventory')
def staff_inventory():
    if 'user_id' not in session or session.get('role') != 'staff':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT I.item_id, I.item_name, I.article_code, I.status, 
               I.price, I.weight, I.size, I.item_type, 
               L.location_name, L.location_type,
               FORMAT(IL.placed_date, 'dd.MM.yyyy HH:mm') as placed_date
        FROM Items I
        LEFT JOIN Item_Locations IL ON I.item_id = IL.item_id
        LEFT JOIN Locations L ON IL.location_id = L.location_id
        ORDER BY I.item_id DESC
    """)
    
    items = [dict(zip([column[0] for column in cursor.description], row)) 
            for row in cursor.fetchall()]
    
    conn.close()
    
    return render_template(
        'staff_inventory.html',
        items=items
    )

@app.route('/supplier')
def supplier_panel():
    if 'user_id' not in session or session.get('role') != 'supplier':
        return redirect('/login')

    status_filter = request.args.get('status_filter', 'all')
    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Базовый запрос
    query = """
        SELECT delivery_id, delivery_date, status
        FROM Deliveries
        WHERE supplier_id = (SELECT supplier_id FROM Suppliers WHERE user_id = ?)
    """
    params = [session['user_id']]

    # Фильтр по статусу
    if status_filter != 'all':
        query += " AND status = ?"
        params.append(status_filter)

    # Фильтр по дате
    if start_date and end_date:
        query += " AND delivery_date BETWEEN ? AND ?"
        params.extend([start_date, end_date])

    query += " ORDER BY delivery_date DESC"
    cursor.execute(query, params)
    deliveries = cursor.fetchall()
    conn.close()

    return render_template('supplier_panel.html', deliveries=deliveries)

@app.route('/create_delivery', methods=['GET', 'POST'])
def create_delivery():
    if request.method == 'GET':
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT supplier_id, supplier_name FROM Suppliers WHERE user_id = ?", (session['user_id'],))
        supplier = cursor.fetchone()
        conn.close()
        return render_template('create_delivery.html', supplier=supplier)

    # POST: обработка формы
    delivery_date = request.form.get('delivery_date')
    delivery_items = request.form.get('delivery_items')
    created_by = session['user_id']

    # Получаем supplier_id по user_id из сессии
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT supplier_id FROM Suppliers WHERE user_id = ?", (created_by,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        return "Поставщик не найден", 400

    supplier_id = result.supplier_id

    try:
        cursor.execute("""
            INSERT INTO Deliveries (supplier_id, delivery_date, status, item_list, created_by)
            VALUES (?, ?, 'pending', ?, ?)
        """, (supplier_id, delivery_date, delivery_items, created_by))
        conn.commit()
    except pyodbc.IntegrityError as e:
        conn.rollback()
        return f"Ошибка при добавлении: {e}", 400
    finally:
        cursor.close()
        conn.close()

    return redirect(url_for('supplier_panel'))

@app.route('/supplier/delivery/<int:delivery_id>')
def delivery_details(delivery_id):
    if 'user_id' not in session or session.get('role') != 'supplier':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Проверяем, что поставка принадлежит текущему поставщику
    cursor.execute("""
        SELECT D.delivery_id, D.delivery_date, D.status, D.item_list
        FROM Deliveries D
        JOIN Suppliers S ON D.supplier_id = S.supplier_id
        WHERE D.delivery_id = ? AND S.user_id = ?
    """, (delivery_id, session['user_id']))
    delivery = cursor.fetchone()
    conn.close()

    if not delivery:
        return "Поставка не найдена или доступ запрещён", 404

    items = json.loads(delivery.item_list)  # Парсим JSON
    return render_template(
        'delivery_details.html',
        delivery=delivery,
        items=items,
        can_cancel=(delivery.status == 'pending')  # Флаг для кнопки отмены
    )

@app.route('/supplier/cancel_delivery/<int:delivery_id>', methods=['POST'])
def supplier_cancel_delivery(delivery_id): 
    if 'user_id' not in session or session.get('role') != 'supplier':
        return redirect('/login')

    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Проверяем принадлежность поставки и статус
    cursor.execute("""
        UPDATE Deliveries
        SET status = 'cancelled'
        WHERE delivery_id = ? AND status = 'pending'
        AND supplier_id IN (SELECT supplier_id FROM Suppliers WHERE user_id = ?)
    """, (delivery_id, session['user_id']))
    
    conn.commit()
    conn.close()
    return redirect(url_for('supplier_panel'))

@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect('/login')
    return f"Добро пожаловать, {session['username']}! Ваша роль: {session['role']}"

if __name__ == '__main__':
    app.run(debug=True, port=5000)